3.2.1 The mpg data frame

install.packages("tidyverse")
library(tidyverse)

> mpg
# A tibble: 234 x 11
   manufacturer model      displ  year   cyl trans      drv     cty   hwy fl    class  
   <chr>        <chr>      <dbl> <int> <int> <chr>      <chr> <int> <int> <chr> <chr>  
 1 audi         a4           1.8  1999     4 auto(l5)   f        18    29 p     compact
 2 audi         a4           1.8  1999     4 manual(m5) f        21    29 p     compact
 3 audi         a4           2    2008     4 manual(m6) f        20    31 p     compact
 4 audi         a4           2    2008     4 auto(av)   f        21    30 p     compact
 5 audi         a4           2.8  1999     6 auto(l5)   f        16    26 p     compact
 6 audi         a4           2.8  1999     6 manual(m5) f        18    26 p     compact
 7 audi         a4           3.1  2008     6 auto(av)   f        18    27 p     compact
 8 audi         a4 quattro   1.8  1999     4 manual(m5) 4        18    26 p     compact
 9 audi         a4 quattro   1.8  1999     4 auto(l5)   4        16    25 p     compact
10 audi         a4 quattro   2    2008     4 manual(m6) 4        20    28 p     compact
# ... with 224 more rows

> ?mpg
# to learn more about mpg data and its variables

ggplot(data=mpg)+
geom_point(mapping=aes(x=displ,y=hwy))
#the plot shows a negative relationship between engine size (displ) and fuel efficiency (hwy). 
#In other words, cars with big engines use more fuel.

3.2.4 Exercises
#Run ggplot(data = mpg). What do you see?
#nothing

#How many rows are in mpg? How many columns?
#234 rows and 11 columns

#What does the drv variable describe? Read the help for ?mpg to find out
#drv
f = front-wheel drive, r = rear wheel drive, 4 = 4wd

#Make a scatterplot of hwy vs cyl.
ggplot(data=mpg)+
+ geom_point(mapping=aes(x=hwy,y=cyl))
#hwy= highway miles per gallon and #cyl=number of cylinders
no real correlation. more miles will use cylinders

#What happens if you make a scatterplot of class vs drv? Why is the plot not useful?
ggplot(data=mpg)+
geom_point(mapping=aes(x=class,y=drv))
#does not show any correlation

3.3 Aesthetic mappings 

COLOR
ggplot(data=mpg)+
+ geom_point(mapping=aes(x=displ,y=hwy, color=class))
#different class vehicles are mapped to different colours
# Scaling: ggplot2 will automatically assign a unique level of the aesthetic (here a unique color) 
to each unique value of the variable, a process known as scaling.

SIZE
ggplot(data=mpg)+
geom_point(mapping=aes(x=displ,y=hwy,size=class))
#Warning message:
#Using size for a discrete variable is not advised. 
#because mapping an unordered variable (class) to an ordered aesthetic (size) is not a good idea.

TRANSPARENCY / ALPHA
ggplot(data=mpg)+
+ geom_point(mapping=aes(x=displ,y=hwy,alpha=class))
#Using size for a discrete variable is not advised
#there are 4 class of vehicles, hard to differentiate

SHAPE
ggplot(data=mpg)+
+ geom_point(mapping=aes(x=displ,y=hwy,shape=class))
#Warning messages:
1: The shape palette can deal with a maximum of 6 discrete values because more than 6
becomes difficult to discriminate; you have
7. Consider specifying shapes manually ifyou must have them. 
2: Removed 62 rows containing missing values (geom_point). 

CHANGE COLOR of ENTIRE PLOT
#To set an aesthetic manually, set the aesthetic by name as an argument of your geom function; i.e. it goes outside of aes()

#change all plots to blue
ggplot(data=mpg)+
geom_point(mapping=aes(x=displ,y=hwy),color="BLUE")

#change all plots to shape no .5
ggplot(data=mpg)+
geom_point(mapping=aes(x=displ,y=hwy),shape=5)

#change all plots to shape no .5 and color blue
ggplot(data=mpg)+
geom_point(mapping=aes(x=displ,y=hwy),shape=5, color="blue")

3.3.1 Exercises

#What’s gone wrong with this code? Why are the points not blue?
##   ggplot(data = mpg) + 
##   geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
the default color for all plots are red, labelled as "blue" instead

correction should be ( it should be outside the aes() bracket)
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
 
#Which variables in mpg are categorical? 
Which variables are continuous? 
(Hint: type ?mpg to read the documentation for the dataset). 
How can you see this information when you run mpg?

# Categorical:model, year, trans, drv, fl,class
# Continuous:displ, cyl, cty, hwy

#Map a continuous variable to color, size, and shape. 
#How do these aesthetics behave differently for categorical vs. continuous variables?

COLOR
ggplot(data=mpg)+
geom_point(mapping=aes(x=hwy,y=cyl, color=hwy))
#the legend for this plot is a shade of color
#for categorical variable, the color is not a range

SIZE
ggplot(data=mpg)+
geom_point(mapping=aes(x=hwy,y=cyl, size=hwy))
#the plot size increased for higher hwy value
#for categorical variable, Warning message: Using size for a discrete variable is not advised. 

SHAPE
ggplot(data=mpg)+
geom_point(mapping=aes(x=hwy,y=cyl, shape=hwy))
#Error: A continuous variable can not be mapped to shape
#for categorical variable, The shape palette can deal with a maximum of 6 discrete values because more than 6 becomes
difficult to discriminate; you have 7

#What happens if you map the same variable to multiple aesthetics?
ggplot(data=mpg)+
+ geom_point(mapping=aes(x=hwy,y=cyl, color=class, shape=class))
#mixture of color and shape
#Warning messages:
1: The shape palette can deal with a maximum of 6 discrete values because more than 6 becomes
difficult to discriminate; you have 7. Consider specifying shapes manually if you must have them. 
2: Removed 62 rows containing missing values (geom_point). 

#What does the stroke aesthetic do? What shapes does it work with? (Hint: use ?geom_point)
ggplot(data=mpg)+
+ geom_point(mapping=aes(x=displ,y=hwy, stroke=hwy))
# The stroke aesthetic seems to adjust the plotted object thickness.

What happens if you map an aesthetic to something other than a variable name, like aes(colour = displ < 5)? 
ggplot(data=mpg)+
geom_point(mapping=aes(x=displ,y=hwy, colour= displ <5))
the displ will differentiate before and after 5

3.5 Facets

FACET_WRAP
ggplot(data=mpg)+
geom_point(mapping=aes(x=displ,y=hwy))+
facet_wrap(~class, nrow=2)
#To facet your plot by a single variable, use facet_wrap(). 
The first argument of facet_wrap() should be a formula, 
which you create with ~ followed by a variable name 
(here “formula” is the name of a data structure in R, not a synonym for “equation”).

FACET_GRID
ggplot(data=mpg)+
geom_point(mapping=aes(x=displ,y=hwy))+
facet_grid(drv~cyl)

ggplot(data=mpg)+
geom_point(mapping=aes(x=displ,y=hwy))+
facet_grid(.~cyl)

3.5.1 Exercises

#What happens if you facet on a continuous variable?
ggplot(data=mpg)+
geom_point(mapping=aes(x=displ,y=hwy))+
facet_grid(.~displ)
#there are many grids created, each continuour variable has a grid

#What do the empty cells in plot with facet_grid(drv ~ cyl) mean? How do they relate to this plot?
ggplot(data=mpg)+
+ geom_point(mapping=aes(x=displ,y=hwy))+
+ facet_grid(drv~cyl)
The facets are empty when there is no data for the according combination 
e.g. rear wheel drive (r) with 4 or 5 cylinder is not listed. The 7 cylinder factes are missed entirely.

#What plots does the following code make? What does . do?
ggplot(data = mpg) + 
 geom_point(mapping = aes(x = displ, y = hwy)) +
 facet_grid(drv ~ .)
 #grid along x-axis
 
 ggplot(data = mpg) + 
 geom_point(mapping = aes(x = displ, y = hwy)) +
 facet_grid(. ~ cyl)
 #grid along y-axis
  
 With faceting it is easier to examine the indivual classes. 
 With coloring it is easier to see how the classes are clustered overall. 
 With larger datasets it’s more likely that you want to see the overall clustering 
 instead of the individual point clouds
 
 #Read ?facet_wrap. What does nrow do? What does ncol do? 
 #What other options control the layout of the individual panels? 
 #Why doesn’t facet_grid() have nrow and ncol arguments?
 
 nrow = determine the number of rows
 ncol= determine the number of columns
 facet_grid has a few variables
 
#When using facet_grid() you should usually put the variable with more unique levels in the columns. 
#Why?
 ggplot(data = mpg) + 
 geom_point(mapping = aes(x = displ, y = hwy)) + 
 facet_grid(class ~ drv)
 
 3.6 Geometric objects
 
 ggplot(data=mpg)+
 geom_point(mapping=aes(x=displ,y=hwy))

ggplot(data=mpg)+
geom_smooth(mapping=aes(x=displ,y=hwy))

DIFFERENTIATE by LINETYPE
ggplot(data=mpg)+
geom_smooth(mapping=aes(x=displ,y=hwy, linetype= drv))

GROUP
ggplot(data=mpg)+
+ geom_smooth(mapping=aes(x=displ,y=hwy, group= drv))

LINETYPE & COLOR
ggplot(data=mpg)+
geom_smooth(mapping=aes(x=displ,y=hwy, linetype= drv, color=drv))

REMOVE LEGEND
ggplot(data=mpg)+
+ geom_smooth(mapping=aes(x=displ,y=hwy, linetype= drv, color=drv), show.legend = F)

SAME plot
1
ggplot(data=mpg)+
geom_point(mapping=aes(x=displ,y=hwy))+
geom_smooth(mapping=aes(x=displ, y=hwy))
2
ggplot(data=mpg, mapping=aes(x=displ,y=hwy))+
geom_point()+
geom_smooth()

PLOT COLOR AES
ggplot(data=mpg, mapping=aes(x=displ,y=hwy))+
geom_point((mappingg=aes(color=class)))+
geom_smooth()

3.6.1 Exercises
#What geom would you use to draw a line chart? A boxplot? A histogram? An area chart?
ggplot(data=mpg, mapping=aes(x=displ,y=hwy))+
geom_point()+
geom_line()

what does this plot look like?
ggplot(data=mpg, mapping=aes(x=displ,y=hwy))+
geom_point()+
geom_smooth(se=F)
#line that shows relationship in plot

#What does show.legend = FALSE do? What happens if you remove it?
Why do you think I used it earlier in the chapter?
removed the legend in the plot

#What does the se argument to geom_smooth() do?
se= FALSE, removes the grey area.
SE shows Shows the confidence interval around the line. (the grey area)

#Will these two graphs look different? Why/why not?
1
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
geom_point() + 
geom_smooth()
2
ggplot() + 
geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) + 
geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy))
No, because the layers inherit the configuration from ggplot.

#Recreate the R code necessary to generate the following graphs.

ggplot(data=mpg, mapping=aes(x=displ,y=hwy))+
geom_point()+
geom_smooth(se=F,show.legend = F)

ggplot(data=mpg)+
geom_point(mapping=aes(x=displ,y=hwy))+
geom_smooth(mapping=aes(x=displ,y=hwy,group=drv),se=F, show.legend = F)

ggplot(data=mpg)+
geom_point(mapping=aes(x=displ,y=hwy, color=drv))+
geom_smooth(mapping=aes(x=displ,y=hwy,color=drv),se=F)

ggplot(data=mpg)+
geom_point(mapping=aes(x=displ,y=hwy, color=drv))+
geom_smooth(mapping=aes(x=displ,y=hwy),se=F)

ggplot(data=mpg)+
geom_point(mapping=aes(x=displ,y=hwy, color=drv))+
geom_smooth(mapping=aes(x=displ,y=hwy, linetype=drv),se=F)

ggplot(data=mpg)+
geom_point(mapping=aes(x=displ,y=hwy, color=drv))

3.7 Statistical transformations

geom_bar and stat_count are iterchangable

ggplot(data=diamonds)
+geom_bar(mapping=aes(x=cut))

ggplot(data=diamonds)+
stat_count(mapping=aes(x=cut))

#DISPLAY by PROPORTION
ggplot(data=diamonds)+
geom_bar(mapping=aes(x=cut, y=..prop.., group=1))

#stat_summary(), which summarises the y values for each unique x value, 
#to draw attention to the summary that you’re computing:
ggplot(data=diamonds)+
stat_summary(
mapping=aes(x=cut,y=depth),
fun.ymin=min,

fun.ymax=max,
fun.y=median)

3.7.1 Exercises

#What is the default geom associated with stat_summary()? 
#How could you rewrite the previous plot to use that geom function instead of the stat function?

ggplot(data = diamonds) + 
  stat_summary(
    mapping = aes(x = cut, y = depth),
    fun.ymin = min,
    fun.ymax = max,
    fun.y = median
    
`stat_summary` is associated with `geom_pointrange`.

ggplot(diamonds) +
  geom_pointrange(aes(cut, depth, ymin = depth, ymax = depth))
 
 #what does geom_col() do? How is it different to geom_bar()?
geom_col` leaves the data as it is. `geom_bar()` creates two variables (count and prop) and then graphs the count data on the y axis. 
With `geom_col` you can plot the values of any x variable against any y variable.

#Most geoms and stats come in pairs that are almost always used in concert. 
#Read through the documentation and make a list of all the pairs. What do they have in common?
aggregate.data.frame(diamonds$price, list(diamonds$cut), mean, na.rm = T) %>%
print(.) %>%
ggplot(aes(Group.1, x)) +
geom_col()







OVERPLOTTING
#values are rounded so the points appear on a grid and many points overlap each other.
#data points spread equally throughout the graph, hard to see where the mass of the data is
#this gridding by setting the position adjustment to “jitter”. 
#position = "jitter" adds a small amount of random noise to each point. 

ggplot(data=mpg)+
  geom_point(mapping=aes(x=displ,y=hwy), position= "jitter")

3.8.1 Exercises

#What is the problem with this plot? How could you improve it?
#data points spread equally throughout the graph, hard to see where the mass of the data is
#correction add "jitter"
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + 
geom_point(position= "jitter")

ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + 
geom_point()+
geom_jitter()

#What parameters to geom_jitter() control the amount of jittering?
check in ?geom_jitter for information
`width` and `height`

#Compare and contrast geom_jitter() with geom_count()

ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + 
  geom_point()+
  geom_jitter()

ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + 
  geom_point()+
  geom_count()

?geom_count 
counts the number of observations at each location, then maps the count to point area. 
It useful when you have discrete data and overplotting.

?geom_jitter
itter geom is a convenient shortcut for geom_point(position = "jitter"). 
It adds a small amount of random variation to the location of each point, 
and is a useful way of handling overplotting caused by discreteness in smaller datasets.

What’s the default position adjustment for geom_boxplot()? 
Create a visualisation of the mpg dataset that demonstrates it.
?geom_boxplot

ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + 
  geom_boxplot(mapping=aes(group=drv))

ggplot(data = mpg, mapping = aes(x = class, y = displ)) + 
  geom_boxplot(aes(colour = drv))

3.9 Coordinate systems
#FLIP X and Y axis use coord_flip()

#normal
ggplot(data=mpg, mapping=aes(x=class,y=hwy))+
  geom_boxplot()

#flip the axis now
ggplot(data=mpg, mapping=aes(x=class,y=hwy))+
  geom_boxplot(mapping=aes(color=class))+
  coord_flip()

#FOR MAPS use coord_quickmap()

I HAVE NOT INSTALLED MAPS INSIDE YET!
nz <- map_data("nz")

ggplot(nz,aes(long,lat,group=group))+
  geom_polygon(fill="white",color="black")

ggplot(nz,es(long,lat,group=group))+
  geom_ploygon(fill="white",color="black")+
  coord_quickmap()
